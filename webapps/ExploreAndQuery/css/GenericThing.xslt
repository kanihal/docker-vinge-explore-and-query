<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Basic Edition 2013 sp1 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="5.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;GenericThing&apos;" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:import-schema schema-location="GenericThingSample.xsd"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:template match="/">
		<xsl:call-template name="altova:Root"/>
	</xsl:template>
	<xsl:template name="altova:Root">
		<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Basic Edition 2013 sp1 (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=9"/>
				<style type="text/css">
					<xsl:comment>@import  url("file:///D:/Development/Source/SemDW/css/style.css");</xsl:comment>
				</style>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:0.6in; margin-right:0.6in; margin-top:0.79in; margin-bottom:0.79in } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body>
				<span style="font-family:Verdana; font-size:medium; ">
					<xsl:text>_HOME_</xsl:text>
				</span>
				<br/>
				<br/>
				<span style="font-family:Verdana; font-size:medium; ">
					<xsl:text>_NAV_GRAPH_</xsl:text>
				</span>
				<br/>
				<br/>
				<xsl:variable name="altova:table">
					<table width="100%">
						<xsl:variable name="altova:CurrContextGrid_0" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="width:33%; ">
									<span style="font-family:Verdana; font-size:medium; font-weight:bold; ">
										<xsl:text>The Thing</xsl:text>
									</span>
									<span style="font-family:Verdana; font-size:medium; font-weight:normal; ">
										<xsl:text> (subject)</xsl:text>
									</span>
								</td>
								<td style="width:625px; ">
									<xsl:for-each select="$XML">
										<xsl:for-each select="Thing">
											<xsl:for-each select="@uri">
												<span style="font-family:Verdana; font-size:medium; font-style:normal; font-variant:normal; font-weight:bold; ">
													<xsl:value-of select="string(.)"/>
												</span>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td style="width:33%; ">
									<span>
										<xsl:text>&#160;</xsl:text>
									</span>
								</td>
								<td style="width:625px; "/>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<xsl:variable name="altova:table">
					<table width="100%">
						<xsl:variable name="altova:CurrContextGrid_1" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="Thing">
									<xsl:for-each select="Types">
										<xsl:for-each select="Type">
											<tr>
												<td style="width:33%; ">
													<span style="font-family:Verdana; font-size:small; ">
														<xsl:text>type</xsl:text>
													</span>
												</td>
												<td>
													<a>
														<xsl:choose>
															<xsl:when test="not(string(concat(&apos;describe?&apos;,@uri)))">
																<xsl:attribute name="href">
																	<xsl:text>#</xsl:text>
																</xsl:attribute>
															</xsl:when>
															<xsl:when test="substring(string(concat(&apos;describe?&apos;,@uri)), 1, 1) = '#'">
																<xsl:attribute name="href">
																	<xsl:value-of select="concat(&apos;describe?&apos;,@uri)"/>
																</xsl:attribute>
															</xsl:when>
															<xsl:otherwise>
																<xsl:attribute name="href">
																	<xsl:if test="substring(string(concat(&apos;describe?&apos;,@uri)), 2, 1) = ':'">
																		<xsl:text>file:///</xsl:text>
																	</xsl:if>
																	<xsl:value-of select="translate(string(concat(&apos;describe?&apos;,@uri)), '&#x5c;', '/')"/>
																</xsl:attribute>
															</xsl:otherwise>
														</xsl:choose>
														<xsl:for-each select="@name">
															<span style="font-family:Verdana; font-size:small; ">
																<xsl:value-of select="string(.)"/>
															</span>
														</xsl:for-each>
													</a>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<xsl:for-each select="@label">
														<span>
															<xsl:text>(</xsl:text>
														</span>
														<span style="font-family:Verdana; font-size:small; ">
															<xsl:value-of select="string(.)"/>
														</span>
														<span>
															<xsl:text>)</xsl:text>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<xsl:variable name="altova:table">
					<table width="100%">
						<xsl:variable name="altova:CurrContextGrid_2" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="width:33%; ">
									<span>
										<xsl:text>&#160;</xsl:text>
									</span>
								</td>
								<td/>
							</tr>
							<tr>
								<td style="width:33%; ">
									<span style="font-family:Verdana; font-size:medium; ">
										<xsl:text>Attribute</xsl:text>
									</span>
								</td>
								<td>
									<span style="font-family:Verdana; font-size:medium; ">
										<xsl:text>Value</xsl:text>
									</span>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<hr/>
				<xsl:variable name="altova:table">
					<table width="100%">
						<xsl:variable name="altova:CurrContextGrid_3" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="Thing">
									<xsl:for-each select="DataProperties">
										<xsl:for-each select="DataProperty">
											<tr>
												<td style="width:33%; ">
													<a>
														<xsl:choose>
															<xsl:when test="not(string(concat(&apos;describe?uri=&apos;,@uri)))">
																<xsl:attribute name="href">
																	<xsl:text>#</xsl:text>
																</xsl:attribute>
															</xsl:when>
															<xsl:when test="substring(string(concat(&apos;describe?uri=&apos;,@uri)), 1, 1) = '#'">
																<xsl:attribute name="href">
																	<xsl:value-of select="concat(&apos;describe?uri=&apos;,@uri)"/>
																</xsl:attribute>
															</xsl:when>
															<xsl:otherwise>
																<xsl:attribute name="href">
																	<xsl:if test="substring(string(concat(&apos;describe?uri=&apos;,@uri)), 2, 1) = ':'">
																		<xsl:text>file:///</xsl:text>
																	</xsl:if>
																	<xsl:value-of select="translate(string(concat(&apos;describe?uri=&apos;,@uri)), '&#x5c;', '/')"/>
																</xsl:attribute>
															</xsl:otherwise>
														</xsl:choose>
														<xsl:for-each select="@name">
															<span style="font-family:Verdana; font-size:small; ">
																<xsl:value-of select="string(.)"/>
															</span>
														</xsl:for-each>
													</a>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<xsl:for-each select="@label">
														<span style="font-family:Verdana; font-size:small; ">
															<xsl:text>(</xsl:text>
														</span>
														<span style="font-family:Verdana; font-size:small; ">
															<xsl:value-of select="string(.)"/>
														</span>
														<span style="font-family:Verdana; font-size:small; ">
															<xsl:text>)</xsl:text>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="Object">
														<xsl:if test="starts-with(  .  , &apos;http&apos; ) = boolean(false)">
															<span style="font-family:Verdana; font-size:small; ">
																<xsl:apply-templates/>
															</span>
														</xsl:if>
														<xsl:if test="starts-with(  .  , &apos;http&apos; )">
															<a>
																<xsl:choose>
																	<xsl:when test="not(string(.))">
																		<xsl:attribute name="href">
																			<xsl:text>#</xsl:text>
																		</xsl:attribute>
																	</xsl:when>
																	<xsl:when test="substring(string(.), 1, 1) = '#'">
																		<xsl:attribute name="href">
																			<xsl:value-of select="."/>
																		</xsl:attribute>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:attribute name="href">
																			<xsl:if test="substring(string(.), 2, 1) = ':'">
																				<xsl:text>file:///</xsl:text>
																			</xsl:if>
																			<xsl:value-of select="translate(string(.), '&#x5c;', '/')"/>
																		</xsl:attribute>
																	</xsl:otherwise>
																</xsl:choose>
																<span style="font-family:Verdana; font-size:small; ">
																	<xsl:apply-templates/>
																</span>
															</a>
														</xsl:if>
														<xsl:for-each select="@unit">
															<span style="font-family:Verdana; font-size:small; ">
																<xsl:text>&#160;</xsl:text>
															</span>
															<span style="font-family:Verdana; font-size:small; ">
																<xsl:value-of select="string(.)"/>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<xsl:variable name="altova:table">
					<table width="100%">
						<xsl:variable name="altova:CurrContextGrid_4" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="width:33%; ">
									<span>
										<xsl:text>&#160;</xsl:text>
									</span>
								</td>
								<td/>
							</tr>
							<tr>
								<td style="width:33%; ">
									<span style="font-family:Verdana; font-size:medium; ">
										<xsl:text>Relation</xsl:text>
									</span>
								</td>
								<td>
									<span style="font-family:Verdana; font-size:medium; ">
										<xsl:text>Object</xsl:text>
									</span>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<hr/>
				<xsl:variable name="altova:table">
					<table width="100%">
						<xsl:variable name="altova:CurrContextGrid_5" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="Thing">
									<xsl:for-each select="ObjectProperties">
										<xsl:for-each select="ObjectProperty">
											<tr>
												<td style="width:33%; ">
													<a>
														<xsl:choose>
															<xsl:when test="not(string(concat(&apos;describe?uri=&apos;,@uri)))">
																<xsl:attribute name="href">
																	<xsl:text>#</xsl:text>
																</xsl:attribute>
															</xsl:when>
															<xsl:when test="substring(string(concat(&apos;describe?uri=&apos;,@uri)), 1, 1) = '#'">
																<xsl:attribute name="href">
																	<xsl:value-of select="concat(&apos;describe?uri=&apos;,@uri)"/>
																</xsl:attribute>
															</xsl:when>
															<xsl:otherwise>
																<xsl:attribute name="href">
																	<xsl:if test="substring(string(concat(&apos;describe?uri=&apos;,@uri)), 2, 1) = ':'">
																		<xsl:text>file:///</xsl:text>
																	</xsl:if>
																	<xsl:value-of select="translate(string(concat(&apos;describe?uri=&apos;,@uri)), '&#x5c;', '/')"/>
																</xsl:attribute>
															</xsl:otherwise>
														</xsl:choose>
														<xsl:for-each select="@name">
															<span style="font-family:Verdana; font-size:small; ">
																<xsl:value-of select="string(.)"/>
															</span>
														</xsl:for-each>
													</a>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<xsl:for-each select="@label">
														<span style="font-family:Verdana; font-size:small; ">
															<xsl:text>(</xsl:text>
														</span>
														<span style="font-family:Verdana; font-size:small; ">
															<xsl:value-of select="string(.)"/>
														</span>
														<span style="font-family:Verdana; font-size:small; ">
															<xsl:text>)</xsl:text>
														</span>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="Object">
														<a>
															<xsl:choose>
																<xsl:when test="not(string(concat(&apos;describe?&apos;,@uri)))">
																	<xsl:attribute name="href">
																		<xsl:text>#</xsl:text>
																	</xsl:attribute>
																</xsl:when>
																<xsl:when test="substring(string(concat(&apos;describe?&apos;,@uri)), 1, 1) = '#'">
																	<xsl:attribute name="href">
																		<xsl:value-of select="concat(&apos;describe?&apos;,@uri)"/>
																	</xsl:attribute>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:attribute name="href">
																		<xsl:if test="substring(string(concat(&apos;describe?&apos;,@uri)), 2, 1) = ':'">
																			<xsl:text>file:///</xsl:text>
																		</xsl:if>
																		<xsl:value-of select="translate(string(concat(&apos;describe?&apos;,@uri)), '&#x5c;', '/')"/>
																	</xsl:attribute>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:for-each select="@name">
																<span style="font-family:Verdana; font-size:small; ">
																	<xsl:value-of select="string(.)"/>
																</span>
															</xsl:for-each>
														</a>
														<span>
															<xsl:text>&#160;</xsl:text>
														</span>
														<xsl:for-each select="@label">
															<span style="font-family:Verdana; font-size:small; ">
																<xsl:text>(</xsl:text>
															</span>
															<span>
																<xsl:value-of select="string(.)"/>
															</span>
															<span style="font-family:Verdana; font-size:small; ">
																<xsl:text>)</xsl:text>
															</span>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<xsl:variable name="altova:table">
					<table width="100%">
						<xsl:variable name="altova:CurrContextGrid_6" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="width:33%; ">
									<span>
										<xsl:text>&#160;</xsl:text>
									</span>
								</td>
								<td/>
							</tr>
							<tr>
								<td style="width:33%; ">
									<span style="font-family:Verdana; font-size:medium; ">
										<xsl:text>Incoming</xsl:text>
									</span>
								</td>
								<td>
									<span style="font-family:Verdana; font-size:medium; ">
										<xsl:text>Relation</xsl:text>
									</span>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<hr/>
				<xsl:variable name="altova:table">
					<table width="100%">
						<xsl:variable name="altova:CurrContextGrid_7" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<xsl:for-each select="$XML">
								<xsl:for-each select="Thing">
									<xsl:for-each select="IncomingRelations">
										<xsl:for-each select="IncomingRelation">
											<tr>
												<td style="width:33%; ">
													<xsl:for-each select="Subject">
														<a>
															<xsl:choose>
																<xsl:when test="not(string(concat(&apos;describe?&apos;,@uri)))">
																	<xsl:attribute name="href">
																		<xsl:text>#</xsl:text>
																	</xsl:attribute>
																</xsl:when>
																<xsl:when test="substring(string(concat(&apos;describe?&apos;,@uri)), 1, 1) = '#'">
																	<xsl:attribute name="href">
																		<xsl:value-of select="concat(&apos;describe?&apos;,@uri)"/>
																	</xsl:attribute>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:attribute name="href">
																		<xsl:if test="substring(string(concat(&apos;describe?&apos;,@uri)), 2, 1) = ':'">
																			<xsl:text>file:///</xsl:text>
																		</xsl:if>
																		<xsl:value-of select="translate(string(concat(&apos;describe?&apos;,@uri)), '&#x5c;', '/')"/>
																	</xsl:attribute>
																</xsl:otherwise>
															</xsl:choose>
															<xsl:for-each select="@name">
																<span style="font-family:Verdana; font-size:small; ">
																	<xsl:value-of select="string(.)"/>
																</span>
															</xsl:for-each>
														</a>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="@name">
														<a>
															<xsl:choose>
																<xsl:when test="not(string(concat(&apos;describe?uri=&apos;,../@uri)))">
																	<xsl:attribute name="href">
																		<xsl:text>#</xsl:text>
																	</xsl:attribute>
																</xsl:when>
																<xsl:when test="substring(string(concat(&apos;describe?uri=&apos;,../@uri)), 1, 1) = '#'">
																	<xsl:attribute name="href">
																		<xsl:value-of select="concat(&apos;describe?uri=&apos;,../@uri)"/>
																	</xsl:attribute>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:attribute name="href">
																		<xsl:if test="substring(string(concat(&apos;describe?uri=&apos;,../@uri)), 2, 1) = ':'">
																			<xsl:text>file:///</xsl:text>
																		</xsl:if>
																		<xsl:value-of select="translate(string(concat(&apos;describe?uri=&apos;,../@uri)), '&#x5c;', '/')"/>
																	</xsl:attribute>
																</xsl:otherwise>
															</xsl:choose>
															<span style="font-family:Verdana; font-size:small; ">
																<xsl:value-of select="string(.)"/>
															</span>
														</a>
													</xsl:for-each>
													<span>
														<xsl:text>&#160;</xsl:text>
													</span>
													<xsl:for-each select="@label">
														<span>
															<xsl:text>(</xsl:text>
														</span>
														<span style="font-family:Verdana; font-size:small; ">
															<xsl:value-of select="string(.)"/>
														</span>
														<span>
															<xsl:text>)</xsl:text>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<hr/>
				<span>
					<xsl:text>_GRAPH_FORM_START_</xsl:text>
				</span>
				<br/>
				<xsl:variable name="altova:table">
					<table width="100%">
						<xsl:variable name="altova:CurrContextGrid_8" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="width:33%; ">
									<span style="font-family:Verdana; font-size:medium; ">
										<xsl:text>named graphs</xsl:text>
									</span>
								</td>
								<td>
									<xsl:variable name="altova:table">
										<table>
											<xsl:variable name="altova:CurrContextGrid_9" select="."/>
											<xsl:variable name="altova:ColumnData"/>
											<tbody>
												<xsl:for-each select="$XML">
													<xsl:for-each select="Thing">
														<xsl:for-each select="Graphs">
															<xsl:for-each select="Graph">
																<tr>
																	<td>
																		<xsl:for-each select="@uri">
																			<input name="{.}" value="on" type="checkbox">
																				<xsl:choose>
																					<xsl:when test="string(.)='true'">
																						<xsl:attribute name="checked">checked</xsl:attribute>
																					</xsl:when>
																					<xsl:when test="string(.)='1'">
																						<xsl:attribute name="checked">checked</xsl:attribute>
																					</xsl:when>
																				</xsl:choose>
																			</input>
																		</xsl:for-each>
																		<xsl:for-each select="@name">
																			<a>
																				<xsl:choose>
																					<xsl:when test="not(string(concat(&apos;describe?uri=&apos;,../@uri)))">
																						<xsl:attribute name="href">
																							<xsl:text>#</xsl:text>
																						</xsl:attribute>
																					</xsl:when>
																					<xsl:when test="substring(string(concat(&apos;describe?uri=&apos;,../@uri)), 1, 1) = '#'">
																						<xsl:attribute name="href">
																							<xsl:value-of select="concat(&apos;describe?uri=&apos;,../@uri)"/>
																						</xsl:attribute>
																					</xsl:when>
																					<xsl:otherwise>
																						<xsl:attribute name="href">
																							<xsl:if test="substring(string(concat(&apos;describe?uri=&apos;,../@uri)), 2, 1) = ':'">
																								<xsl:text>file:///</xsl:text>
																							</xsl:if>
																							<xsl:value-of select="translate(string(concat(&apos;describe?uri=&apos;,../@uri)), '&#x5c;', '/')"/>
																						</xsl:attribute>
																					</xsl:otherwise>
																				</xsl:choose>
																				<span style="font-family:Verdana; font-size:small; ">
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</a>
																		</xsl:for-each>
																	</td>
																</tr>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</tbody>
										</table>
									</xsl:variable>
									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
									</xsl:apply-templates>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<span>
					<xsl:text>_GRAPH_FILTER_INPUT_</xsl:text>
				</span>
				<br/>
				<span>
					<xsl:text>_GRAPH_FORM_END__CLEAR_FILTER_</xsl:text>
				</span>
				<br/>
				<hr/>
				<span>
					<xsl:text>_DELETE_</xsl:text>
				</span>
			</body>
		</html>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
